
// File: c:\Users\Potatox\Desktop\app\vite.config.ts
import {defineConfig} from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';
import {splitVendorChunkPlugin} from 'vite';
import {createHtmlPlugin} from 'vite-plugin-html';
import fs from 'fs';

const hash = fs.readFileSync('public/definitions/hash.json', 'utf8');

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    react(),
    createHtmlPlugin({
      inject: {
        data: {
          hash,
        },
      },
    }),
    splitVendorChunkPlugin(),
  ],
  assetsInclude: ['**/*.glb'],
  envDir: '.',
  server: {open: true},
  resolve: {
    alias: {
      src: path.resolve(__dirname, './src'),
      assets: path.resolve(__dirname, './src/assets'),
    },
  },
  optimizeDeps: {
    include: ['@the-via/reader'],
    esbuildOptions: {
      // Node.js global to browser globalThis
      define: {
        global: 'globalThis',
      },
      // Enable esbuild polyfill plugins
      plugins: [],
    },
  },
});


// File: c:\Users\Potatox\Desktop\app\src\vite-env.d.ts
/// <reference types="vite/client" />


// File: c:\Users\Potatox\Desktop\app\src\components\styled.ts
import styled from 'styled-components';

export const Message = styled.span`
  font-size: 18px;
  margin: 8px;
  text-align: center;
`;

export const ErrorMessage = styled(Message)`
  color: #d15e5e;
`;

export const SuccessMessage = styled(Message)`
  color: #9ab46a;
`;


// File: c:\Users\Potatox\Desktop\app\src\components\icons\get-icon-color.ts
export default function getIconColor(isSelected: boolean) {
  return {
    style: {
      color: isSelected ? 'var(--bg_icon-highlighted)' : 'var(--bg_control)',
    },
  };
}


// File: c:\Users\Potatox\Desktop\app\src\components\inputs\pelpi\input.ts
export type PelpiMeta<A = {}> = A;
export type PelpiInput<A> = {
  value: number;
  setValue: (val: number) => void;
  meta: PelpiMeta<A>;
};


// File: c:\Users\Potatox\Desktop\app\src\components\n-links\key-group.ts
import {getBoundingBox, Result, VIAKey} from '@the-via/reader';
import {useAppDispatch} from 'src/store/hooks';
import {updateSelectedKey} from 'src/store/keymapSlice';
import {
  KeycapSharedProps,
  KeyGroupProps,
  KeysKeys,
} from 'src/types/keyboard-rendering';
import {getByteToKey} from 'src/utils/key';
import {getBasicKeyDict} from 'src/utils/key-to-byte/dictionary-store';
import {
  calculatePointPosition,
  getKeyboardRowPartitions,
  getKeyId,
  getLabel,
  getMeshName,
  getScale,
  KeycapMetric,
} from 'src/utils/keyboard-rendering';

export function getKeycapSharedProps<T>(
  k: VIAKey,
  i: number,
  props: KeyGroupProps<T>,
  keysKeys: KeysKeys<T>,
  selectedKeyIndex: number | null,
  labels: any[],
  skipFontCheck: boolean,
): KeycapSharedProps<T> {
  const {
    position,
    rotation,
    scale,
    color,
    idx,
    onClick,
    onPointerDown,
    onPointerOver,
  } = keysKeys.coords[i];
  const isEncoder = k['ei'] !== undefined;
  return {
    mode: props.mode,
    position: position,
    rotation: rotation,
    scale: getScale(k, scale),
    textureWidth: k.w,
    textureHeight: k.h,
    textureOffsetX: !!k.w2 ? Math.abs(k.w2 - k.w) : 0,
    color: color,
    shouldRotate: isEncoder,
    onPointerDown: onPointerDown,
    onPointerOver: onPointerOver,
    keyState: props.pressedKeys ? props.pressedKeys[i] : -1,
    disabled: !props.selectable,
    selected: i === selectedKeyIndex,
    idx: idx,
    label: labels[i],
    onClick: onClick,
    key: keysKeys.indices[i],
    skipFontCheck,
  };
}

const getKeysKeysIndices =
  (vendorProductId: number) => (k: VIAKey, i: number) => {
    const isEncoder = k['ei'] !== undefined;
    return `${vendorProductId}-${i}-${k.w}-${k.h}-${isEncoder}`;
  };

export function getLabels<T>(
  props: KeyGroupProps<T>,
  macroExpressions: string[],
  basicKeyToByte: ReturnType<typeof getBasicKeyDict>,
  byteToKey: ReturnType<typeof getByteToKey>,
) {
  return !props.matrixKeycodes.length
    ? []
    : props.keys.map((k, i) =>
        getLabel(
          props.matrixKeycodes[i],
          k.w,
          macroExpressions,
          props.definition,
          basicKeyToByte,
          byteToKey,
        ),
      );
}

export function getKeysKeys<T>(
  props: KeyGroupProps<T>,
  keyColorPalette: any,
  dispatch: ReturnType<typeof useAppDispatch>,
  getPosition: (x: number, y: number) => [number, number, number],
): KeysKeys<T> {
  const {keys} = props;
  const {rowMap} = getKeyboardRowPartitions(keys);
  const boxes = (keys as unknown as Result[]).map(getBoundingBox);
  const [minX, minY] = [
    Math.min(...boxes.map((p) => p.xStart)),
    Math.min(...boxes.map((p) => p.yStart)),
  ];
  const positions = keys
    .map((k) => {
      const key = {...k};
      if (minX < 0) {
        key.x = key.x - minX;
      }
      if (minY < 0) {
        key.y = key.y - minY;
      }
      return key;
    })
    .map(calculatePointPosition);
  return {
    indices: keys.map(getKeysKeysIndices(props.definition.vendorProductId)),
    coords: keys.map((k, i) => {
      // x & y are pixel positioned
      const [x, y] = positions[i];
      const r = (k.r * (2 * Math.PI)) / 360;
      // The 1.05mm in-between keycaps but normalized by a keycap width/height
      const normalizedKeyXSpacing =
        KeycapMetric.keyXSpacing / KeycapMetric.keyWidth;
      const normalizedKeyYSpacing =
        KeycapMetric.keyYSpacing / KeycapMetric.keyHeight;
      const normalizedWidth =
        (1 + normalizedKeyXSpacing) * (k.w2 || k.w) - normalizedKeyXSpacing;
      const normalizedHeight =
        k.h * (1 + normalizedKeyYSpacing) - normalizedKeyYSpacing;
      const meshKey = getMeshName(k, rowMap[getKeyId(k)], false);
      const paletteKey = props.keyColors ? i : k.color;
      const color = (keyColorPalette as any)[paletteKey];

      return {
        position: getPosition(x + minX, y + minY),
        rotation: [0, 0, -r],
        scale: [normalizedWidth, normalizedHeight, 1],
        color,
        meshKey,
        idx: i,
        onClick: (evt: any, idx: number) => {
          evt.stopPropagation();
          dispatch(updateSelectedKey(idx));
        },
        onPointerDown: props.onKeycapPointerDown,
        onPointerOver: props.onKeycapPointerOver,
      };
    }),
  };
}


// File: c:\Users\Potatox\Desktop\app\src\components\n-links\matrix-lines.ts
import {VIAKey} from '@the-via/reader';
import {calculatePointPosition} from 'src/utils/keyboard-rendering';

export const generateRowColArray = (
  keys: VIAKey[],
  rows: number,
  cols: number,
) => {
  const matrixKeys = keys.filter((key) => key['ei'] === undefined && !key.d);
  const rowKeys = matrixKeys
    .reduce(
      (sumKeys, key) => {
        sumKeys[key.row][key.col] = calculatePointPosition(key);
        return sumKeys;
      },
      Array(rows)
        .fill(0)
        .map(() => Array(cols).fill(0)),
    )
    .map((arr) => arr.sort((a, b) => a[0] - b[0]));
  const colKeys = matrixKeys
    .reduce(
      (sumKeys, key) => {
        sumKeys[key.col][key.row] = calculatePointPosition(key);
        return sumKeys;
      },
      Array(cols)
        .fill(0)
        .map(() => Array(rows).fill(0)),
    )
    .map((arr) => arr.sort((a, b) => a[1] - b[1]));
  return {rowKeys, colKeys};
};


// File: c:\Users\Potatox\Desktop\app\src\components\panes\configure-panes\custom\satisfaction75\api.ts
import {EncoderBehavior} from 'src/types/types';
import type {KeyboardAPI} from '../../../../../utils/keyboard-api';

const GET_KEYBOARD_VALUE = 0x02;
const SET_KEYBOARD_VALUE = 0x03;

const KB_VALUES = {
  ENABLED_ENCODER_MODES: 0x80,
  OLED_DEFAULT_MODE: 0x81,
  ENCODER_CUSTOM: 0x82,
  OLED_MODE: 0x83,
};

export const getEncoderModes = async (api: KeyboardAPI) => {
  const bytes = [KB_VALUES.ENABLED_ENCODER_MODES];
  const [, , enabledModes] = await api.hidCommand(GET_KEYBOARD_VALUE, bytes);
  return enabledModes;
};

export const setEncoderModes = async (
  api: KeyboardAPI,
  newEncoderModes: number,
) => {
  const bytes = [KB_VALUES.ENABLED_ENCODER_MODES, newEncoderModes];
  await api.hidCommand(SET_KEYBOARD_VALUE, bytes);
};

export const getDefaultOLED = async (api: KeyboardAPI) => {
  const bytes = [KB_VALUES.OLED_DEFAULT_MODE];
  const [, , defaultMode] = await api.hidCommand(GET_KEYBOARD_VALUE, bytes);
  return defaultMode;
};

export const setDefaultOLED = async (
  api: KeyboardAPI,
  newDefaultMode: number,
) => {
  const bytes = [KB_VALUES.OLED_DEFAULT_MODE, newDefaultMode];
  await api.hidCommand(SET_KEYBOARD_VALUE, bytes);
};

export const getOLEDMode = async (api: KeyboardAPI) => {
  const bytes = [KB_VALUES.OLED_MODE];
  const [, , defaultMode] = await api.hidCommand(GET_KEYBOARD_VALUE, bytes);
  return defaultMode;
};

export const setOLEDMode = async (api: KeyboardAPI, newDefaultMode: number) => {
  const bytes = [KB_VALUES.OLED_MODE, newDefaultMode];
  await api.hidCommand(SET_KEYBOARD_VALUE, bytes);
};

export const getCustomEncoderConfig = async (
  api: KeyboardAPI,
  encoderIdx: number,
): Promise<EncoderBehavior> => {
  const bytes = [KB_VALUES.ENCODER_CUSTOM, encoderIdx];
  const raw = await api.hidCommand(GET_KEYBOARD_VALUE, bytes);
  const [, , , cw1, cw2, ccw1, ccw2, press1, press2] = raw;
  return [(cw1 << 8) | cw2, (ccw1 << 8) | ccw2, (press1 << 8) | press2];
};

export const setCustomEncoderConfig = async (
  api: KeyboardAPI,
  encoderIdx: number,
  behavior: number,
  keycode: number,
) => {
  const hi = (keycode & 0xff00) >> 8;
  const lo = keycode & 0xff;
  const bytes = [KB_VALUES.ENCODER_CUSTOM, encoderIdx, behavior, hi, lo];
  await api.hidCommand(SET_KEYBOARD_VALUE, bytes);
};


// File: c:\Users\Potatox\Desktop\app\src\components\panes\configure-panes\custom\satisfaction75\index.ts
import {SatisfactionMenu} from './menu';
import CustomIcon from '../icon';
export const Pane = SatisfactionMenu;
export const Title = 'Custom Features';
export const Icon = CustomIcon;


// File: c:\Users\Potatox\Desktop\app\src\components\three-fiber\update-uv-maps.ts
import {useGLTF} from '@react-three/drei';
import glbSrc from 'assets/models/keyboard_components.glb';
import {useEffect} from 'react';
import {Box3, BufferAttribute, BufferGeometry, Group, Mesh} from 'three';

export const UpdateUVMaps = () => {
  const keycapScene = useGLTF(glbSrc, true).scene;
  useEffect(() => {
    // updating uv maps
    // let's assume of now we want to contain uvs in the bottom 1/3
    Object.values(keycapScene.children).forEach((mesh) => {
      if ((mesh as Group).isGroup) {
        return;
      }
      const u100 = mesh as Mesh;
      // 1U scale to texture unit
      const size1u = 1 / 2.6;
      const geometry100u = u100.geometry as BufferGeometry;
      const {min} = geometry100u!.boundingBox as Box3;
      // 1U in mm (which is also mesh units)
      const unitScale = 19.05;
      // This is the offset between the cherry grid corner and a keycap corner in mm
      // (which is also mesh units).
      // A 1U keycap is actually 18.16mm, 1U is 19.05mm
      // thus the offset is ( 19.05 - 18.16 ) / 2 = 0.445
      // This gap is constant for all keycap sizes.
      // Aligning the UV coordinates relative to the cherry grid corner makes
      // the math easier later on when using dimensions in cherry units i.e. U
      const offsetToCorner = 0.445;
      const pos100u = u100.geometry.attributes.position as BufferAttribute;
      if (!u100.geometry.attributes.uv) {
        u100.geometry.setAttribute(
          'uv',
          new BufferAttribute(new Float32Array(pos100u.count * 2), 2, false),
        );
      }
      const uv100u = u100.geometry.attributes.uv as BufferAttribute;

      const newUv = new Float32Array(uv100u.count * 2);
      for (let i = 0; i < u100.geometry.attributes.uv.count; i++) {
        // update uvs
        newUv[2 * i] =
          (size1u * (pos100u.array[i * 3] - min.x + offsetToCorner)) /
          unitScale;
        newUv[2 * i + 1] =
          (size1u * (pos100u.array[i * 3 + 1] - min.y + offsetToCorner)) /
          unitScale;
      }
      uv100u.copyArray(newUv);
      geometry100u.center();
      uv100u.needsUpdate = true;
    });
  }, [keycapScene]);
  return null;
};


// File: c:\Users\Potatox\Desktop\app\src\components\void\test-keyboard-sounds.ts
import {useEffect} from 'react';
import {getTestKeyboardSoundsSettings} from 'src/store/settingsSlice';
import {TestKeyState} from 'src/types/types';
import {Note, setGlobalAmpGain} from '../../utils/note';
import {useAppSelector} from 'src/store/hooks';

export enum TestKeyboardSoundsMode {
  Random,
  WickiHayden,
  Chromatic,
}

let lastPressedKeys: TestKeyState[][] = [];
let notes: Record<string, Note> = {};

const baseSeed = Math.floor(Math.random() * 1000);
const seededRandom = (seed: number) => {
  return (((baseSeed + seed) * 9301 + 49297) % 233280) / 233280;
};

const calculateMidiNote = (
  mode: TestKeyboardSoundsMode,
  transpose: number,
  rowCount: number,
  row: number,
  col: number,
) => {
  // Adjust for more or less than 5 rows
  // Map to 0..4 = bottom row to top row
  // eg. a 2 row macropad maps to the same as
  // the top two rows of a 60%
  const adjustedRow =
    Math.min(4, rowCount - row - 1) + Math.max(0, 5 - rowCount);

  switch (mode) {
    case TestKeyboardSoundsMode.WickiHayden: {
      // This is bottom row relative
      // J is C4 = 72
      // Home row starts on 72 - 14
      const rowStartMidiNote = [-18, -19, -14, -9, -4];
      return rowStartMidiNote[adjustedRow] + 72 + transpose + col * 2;
    }
    case TestKeyboardSoundsMode.Chromatic: {
      // This is bottom row relative
      // J is C4 = 72
      // Home row starts on 72 - 7
      const rowStartMidiNote = [-15, -12, -7, -1, +4];
      return rowStartMidiNote[adjustedRow] + 72 + transpose + col;
    }
    case TestKeyboardSoundsMode.Random:
    default: {
      return (
        72 + transpose + Math.floor(seededRandom(row * 1000 + col) * 24) - 12
      );
    }
  }
};

const turnOffAllTheNotes = () => {
  Object.values(notes).forEach((note) => note?.noteOff());
};

export const TestKeyboardSounds: React.FC<{
  pressedKeys: TestKeyState[][];
}> = ({pressedKeys}) => {
  const {waveform, volume, mode, transpose} = useAppSelector(
    getTestKeyboardSoundsSettings,
  );

  useEffect(() => {
    setGlobalAmpGain(volume / 100);
  }, [volume]);

  useEffect(() => {
    if (pressedKeys.length === 0) {
      turnOffAllTheNotes();
    } else {
      const rowCount = pressedKeys.length;
      lastPressedKeys = pressedKeys.reduce((p, n, row) => {
        return [
          ...p,
          n.reduce((p2, n2, col) => {
            const index = `${row},${col}`;
            const lastState =
              lastPressedKeys?.at(row)?.at(col) ?? TestKeyState.KeyUp;
            const state = n2 ?? TestKeyState.KeyUp;
            if (state != lastState) {
              if (state == TestKeyState.KeyDown) {
                const midiNote = calculateMidiNote(
                  mode,
                  transpose,
                  rowCount,
                  row,
                  col,
                );
                notes[index] = new Note(midiNote, waveform);
                notes[index].noteOn();
              } else if (state == TestKeyState.KeyUp) {
                notes[index]?.noteOff();
              }
            }
            return [...p2, n2];
          }, [] as TestKeyState[]),
        ];
      }, [] as TestKeyState[][]);
    }
  }, [pressedKeys]);

  useEffect(() => {
    return () => {
      turnOffAllTheNotes();
    };
  }, []);

  return null;
};

