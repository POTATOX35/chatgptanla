
// File: c:\Users\Potatox\Desktop\app\src\utils\test-webgl.ts
function isWebGLAvailable() {
  try {
    const canvas = document.createElement('canvas');
    return !!(
      window.WebGLRenderingContext &&
      (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'))
    );
  } catch (e) {
    return false;
  }
}

export const webGLIsAvailable = isWebGLAvailable();


// File: c:\Users\Potatox\Desktop\app\src\utils\themes.ts
import {THEMES as REMOTETHEMES} from '@the-via/reader';
import {KeyColorPair} from 'src/types/keyboard-rendering';

export type Theme = {
  alpha: KeyColorPair;
  mod: KeyColorPair;
  accent: KeyColorPair;
};

export const THEMES = {
  ...{
    OLIVIA_DARK: {
      alpha: {
        c: '#363434',
        t: '#E8C4B8',
      },
      mod: {
        c: '#363434',
        t: '#E8C4B8',
      },
      accent: {
        c: '#E8C4B8',
        t: '#363434',
      },
    },
    OLIVE: {
      alpha: {
        t: '#66665A',
        c: '#D9D7C4',
      },
      mod: {
        c: '#66665A',
        t: '#9DA183',
      },
      accent: {
        c: '#9DA183',
        t: '#66665A',
      },
    },
    OLIVE_DARK: {
      alpha: {
        c: '#66665A',
        t: '#9DA183',
      },
      mod: {
        c: '#66665A',
        t: '#9DA183',
      },
      accent: {
        c: '#9DA183',
        t: '#66665A',
      },
    },
    OLNY: {
      alpha: {
        c: '#c20018',
        t: '#cfa174',
      },
      mod: {
        c: '#c20018',
        t: '#cfa174',
      },
      accent: {
        t: '#c20018',
        c: '#cfa174',
      },
    },
    GREG: {
      alpha: {
        c: '#f8c200',
        t: '#393b3b',
      },
      mod: {
        c: '#f7f2ea',
        t: '#393b3b',
      },
      accent: {
        c: '#171718',
        t: '#393b3b',
      },
    },
    CARBON_BLACK_A: {
      alpha: {
        c: '#788194',
        t: '#f3f3f3',
      },
      mod: {
        c: '#3b3b3e',
        t: '#f3f3f3',
      },
      accent: {
        c: '#e66b67',
        t: '#f3f3f3',
      },
    },
    CARBON_BLACK_B: {
      alpha: {
        c: '#3b3b3e',
        t: '#f3f3f3',
      },
      mod: {
        c: '#788194',
        t: '#f3f3f3',
      },
      accent: {
        c: '#e66b67',
        t: '#f3f3f3',
      },
    },
    SILVER_GREY_A: {
      alpha: {
        c: '#b2b3b8',
        t: '#f3f3f3',
      },
      mod: {
        c: '#838589',
        t: '#f3f3f3',
      },
      accent: {
        c: '#e8db5d',
        t: '#3d3125',
      },
    },
    SILVER_GREY_B: {
      alpha: {
        c: '#838589',
        t: '#f3f3f3',
      },
      mod: {
        c: '#b2b3b8',
        t: '#f3f3f3',
      },
      accent: {
        c: '#e8db5d',
        t: '#3d3125',
      },
    },
    NAVY_BLUE_A: {
      alpha: {
        c: '#547be8',
        t: '#f3f3f3',
      },
      mod: {
        c: '#49599f',
        t: '#f3f3f3',
      },
      accent: {
        c: '#4dcfe0',
        t: '#f3f3f3',
      },
    },
    NAVY_BLUE_B: {
      alpha: {
        c: '#49599f',
        t: '#f3f3f3',
      },
      mod: {
        c: '#547be8',
        t: '#f3f3f3',
      },
      accent: {
        c: '#4dcfe0',
        t: '#f3f3f3',
      },
    },
    FENDAI: {
      alpha: {
        c: '#f0ebec',
        t: '#07010f',
      },
      mod: {
        c: '#f0ebec',
        t: '#56395c',
      },
      accent: {
        c: '#fc5d75',
        t: '#56395c',
      },
    },
    HONEY_MILK: {
      alpha: {
        c: '#fffff8',
        t: '#07010f',
      },
      mod: {
        c: '#fffff8',
        t: '#07010f',
      },
      accent: {
        c: '#f8b140',
        t: '#07010f',
      },
    },
    MATCHA: {
      alpha: {
        c: '#e8e8df',
        t: '#4e475c',
      },
      mod: {
        c: '#828572',
        t: '#4e475c',
      },
      accent: {
        c: '#828572',
        t: '#4e475c',
      },
    },
    BLACK_GREY: {
      alpha: {
        c: '#7e8293',
        t: '#a5cbe6',
      },
      mod: {
        c: '#364352',
        t: '#eff3f2',
      },
      accent: {
        c: '#364352',
        t: '#eff3f2',
      },
    },
    WHITE_GREEN: {
      alpha: {
        c: '#fefefe',
        t: '#272727',
      },
      mod: {
        c: '#275c65',
        t: '#d0eae8',
      },
      accent: {
        c: '#275c65',
        t: '#d0eae8',
      },
    },
    WHITE: {
      alpha: {
        c: '#fefefe',
        t: '#272727',
      },
      mod: {
        c: '#fefefe',
        t: '#272727',
      },
      accent: {
        c: '#fefefe',
        t: '#272727',
      },
    },
    BLACK: {
      alpha: {
        c: '#272727',
        t: '#fefefe',
      },
      mod: {
        c: '#272727',
        t: '#fefefe',
      },
      accent: {
        c: '#272727',
        t: '#fefefe',
      },
    },
    BLACK_AND_WHITE: {
      alpha: {
        c: '#fefefe',
        t: '#272727',
      },
      mod: {
        c: '#272727',
        t: '#fefefe',
      },
      accent: {
        c: '#272727',
        t: '#fefefe',
      },
    },
    CLASSIC_GREY: {
      alpha: {
        c: '#fcfcfc',
        t: '#1a1a1a',
      },
      mod: {
        c: '#a0a0a0',
        t: '#1a1a1a',
      },
      accent: {
        c: '#a0a0a0',
        t: '#1a1a1a',
      },
    },
  },
  ...REMOTETHEMES,
};


// File: c:\Users\Potatox\Desktop\app\src\utils\type-predicates.ts
import {KeyboardDictionary} from '@the-via/reader';
import {AuthorizedDevice, ConnectedDevice} from 'src/types/types';

export function isNotNullish<A>(a: A | undefined | null): a is A {
  return a !== undefined && a !== null;
}

export function isFulfilledPromise<A>(
  a: PromiseSettledResult<A>,
): a is PromiseFulfilledResult<A> {
  return a.status === 'fulfilled';
}

export function isAuthorizedDeviceConnected(
  device: AuthorizedDevice,
  definitions?: KeyboardDictionary,
) {
  return (
    definitions &&
    definitions[device.vendorProductId] &&
    definitions[device.vendorProductId][device.requiredDefinitionVersion]
  );
}


// File: c:\Users\Potatox\Desktop\app\src\utils\usb-hid.ts
import {HID} from '../shims/node-hid';
import {usbDetect} from '../shims/usb-detection';
import type {Device, WebVIADevice} from '../types/types';

export {HID} from '../shims/node-hid';
export {usbDetect} from '../shims/usb-detection';

export async function scanDevices(
  forceRequest: boolean,
): Promise<WebVIADevice[]> {
  return HID.devices(forceRequest);
}

// TODO: fix typing. This actually returns a HID object, but it complains if you type it as such.
export function initAndConnectDevice({path}: Pick<Device, 'path'>): Device {
  const device = new HID.HID(path);
  return device;
}

export function startMonitoring() {
  usbDetect.startMonitoring();
}


// File: c:\Users\Potatox\Desktop\app\src\utils\use-global-keys.ts
import {useEffect, useState} from 'react';
import {TestKeyState} from 'src/types/types';
import {getIndexByEvent} from './key-event';

type TestKeys = {[code: number]: TestKeyState};
export const useGlobalKeys = (enableGlobalKeys: boolean) => {
  const startMatrixTest = !enableGlobalKeys;
  const selectedKeysState = useState<TestKeys>({});
  const [selectedKeys, setSelectedKeys] = selectedKeysState;
  // If pressed key is our target key then set to true
  function downHandler(evt: KeyboardEvent) {
    evt.preventDefault();
    if (
      !startMatrixTest &&
      !evt.repeat &&
      selectedKeys[getIndexByEvent(evt) ?? -1] !== TestKeyState.KeyDown
    ) {
      setSelectedKeys((selectedKeys) => ({
        ...selectedKeys,
        [getIndexByEvent(evt)]: TestKeyState.KeyDown,
      }));
    }
  }

  // If released key is our target key then set to false
  const upHandler = (evt: KeyboardEvent) => {
    evt.preventDefault();
    if (
      !startMatrixTest &&
      selectedKeys[getIndexByEvent(evt)] !== TestKeyState.KeyUp
    ) {
      setSelectedKeys((selectedKeys) => ({
        ...selectedKeys,
        [getIndexByEvent(evt)]: TestKeyState.KeyUp,
      }));
    }
  };

  useEffect(() => {
    if (enableGlobalKeys) {
      window.addEventListener('keydown', downHandler);
      window.addEventListener('keyup', upHandler);
    }
    // Remove event listeners on cleanup
    return () => {
      window.removeEventListener('keydown', downHandler);
      window.removeEventListener('keyup', upHandler);
    };
  }, [enableGlobalKeys]); // Empty array ensures that effect is only run on mount and unmount
  return selectedKeysState;
};


// File: c:\Users\Potatox\Desktop\app\src\utils\use-keycode-recorder.ts
import {useCallback, useEffect, useMemo, useState} from 'react';
import {getKeycodes} from './key';
import {mapEvtToKeycode} from './key-event';
import {RawKeycodeSequence, RawKeycodeSequenceAction} from './macro-api/types';

let heldKeys = {} as any;
let lastEvtTime = 0;
export const useKeycodeRecorder = (
  enableRecording: boolean,
  recordDelays: boolean,
) => {
  const keycodeSequenceState = useState<RawKeycodeSequence>([]);
  const [, setKeycodeSequence] = keycodeSequenceState;
  const keycodes = useMemo(
    () => getKeycodes().flatMap((menu) => menu.keycodes),
    [],
  );
  // If pressed key is our target key then set to true
  const addToSequence = useCallback(
    (evt: KeyboardEvent, keyState: RawKeycodeSequenceAction) => {
      evt.preventDefault();
      if (enableRecording && !evt.repeat) {
        setKeycodeSequence((keycodeSequence) => {
          const keycode = keycodes.find((k) => k.code === mapEvtToKeycode(evt));
          const currTime = Date.now();
          const keycodeLabel = keycode?.code;
          if (keycodeSequence.length && recordDelays) {
            keycodeSequence.push([
              RawKeycodeSequenceAction.Delay,
              currTime - lastEvtTime,
            ]);
          }
          if (keycodeLabel) {
            keycodeSequence.push([keyState, keycodeLabel]);
          }
          lastEvtTime = currTime;
          return [...keycodeSequence];
        });
      }
    },
    [enableRecording, recordDelays],
  );
  const downHandler = useCallback(
    (evt: KeyboardEvent) => {
      if (!evt.repeat) {
        heldKeys[evt.code] = true;
        addToSequence(evt, RawKeycodeSequenceAction.Down);
      }
    },
    [enableRecording],
  );

  // If released key is our target key then set to false
  const upHandler = useCallback(
    (evt: KeyboardEvent) => {
      heldKeys[evt.code] = false;
      addToSequence(evt, RawKeycodeSequenceAction.Up);
    },
    [enableRecording],
  );

  useEffect(() => {
    heldKeys = {};
    if (enableRecording) {
      window.addEventListener('keydown', downHandler);
      window.addEventListener('keyup', upHandler);
    }
    // Remove event listeners on cleanup
    return () => {
      heldKeys = {};
      window.removeEventListener('keydown', downHandler);
      window.removeEventListener('keyup', upHandler);
    };
  }, [enableRecording]); // Empty array ensures that effect is only run on mount and unmount
  return keycodeSequenceState;
};


// File: c:\Users\Potatox\Desktop\app\src\utils\use-matrix-test.ts
import {VIADefinitionV2, VIADefinitionV3} from '@the-via/reader';
import {useDispatch} from 'react-redux';
import {KeyboardAPI, KeyboardValue} from './keyboard-api';
import {useEffect, useRef, useState} from 'react';
import {setTestMatrixEnabled} from 'src/store/settingsSlice';
import {ConnectedDevice, TestKeyState} from 'src/types/types';

const invertTestKeyState = (s: TestKeyState) =>
  s === TestKeyState.KeyDown ? TestKeyState.KeyUp : TestKeyState.KeyDown;

export const useMatrixTest = (
  startTest: boolean,
  api?: KeyboardAPI,
  device?: ConnectedDevice,
  selectedDefinition?: VIADefinitionV2 | VIADefinitionV3,
) => {
  const selectedKeyArr = useState<any>([]);
  const [, setSelectedKeys] = selectedKeyArr;
  const dispatch = useDispatch();
  const shouldContinueRef = useRef(startTest);

  useEffect(() => {
    let flat: number[] = [];
    const stopTicking = () => {
      shouldContinueRef.current = false;
    };

    const startTicking = async (
      api: KeyboardAPI,
      protocol: number,
      selectedDefinition: VIADefinitionV2 | VIADefinitionV3,
      prevFlat: number[],
    ) => {
      if (startTest && api && selectedDefinition) {
        const {cols, rows} = selectedDefinition.matrix;
        const bytesPerRow = Math.ceil(cols / 8);
        const rowsPerQuery = Math.floor(28 / bytesPerRow);
        try {
          let newFlat: number[] = [];

          for (let offset = 0; offset < rows; offset += rowsPerQuery) {
            const querySize = Math.min(
              rows * bytesPerRow - newFlat.length, // bytes remaining
              bytesPerRow * rowsPerQuery, // max bytes per query
            );
            newFlat.push(
              ...((await api.getKeyboardValue(
                KeyboardValue.SWITCH_MATRIX_STATE,
                protocol >= 12 ? [offset] : [],
                querySize,
              )) as number[]),
            );
          }

          const keysChanges = newFlat.some(
            (val, byteIdx) => val ^ (prevFlat[byteIdx] || 0),
          );
          if (!keysChanges) {
            await api.timeout(20);
            if (shouldContinueRef.current) {
              startTicking(api, protocol, selectedDefinition, prevFlat);
            }
            return;
          }
          setSelectedKeys((selectedKeys: any) =>
            newFlat.reduce(
              (res, val, byteIdx) => {
                const xor = val ^ (prevFlat[byteIdx] || 0);
                if (xor === 0) {
                  return res;
                }
                const row = ~~(byteIdx / bytesPerRow);

                const colOffset =
                  8 * (bytesPerRow - 1 - (byteIdx % bytesPerRow));
                return Array(Math.max(0, Math.min(8, cols - colOffset)))
                  .fill(0)
                  .reduce((resres, _, idx) => {
                    const matrixIdx = cols * row + idx + colOffset;
                    resres[matrixIdx] =
                      ((xor >> idx) & 1) === 1
                        ? invertTestKeyState(resres[matrixIdx])
                        : resres[matrixIdx];
                    return resres;
                  }, res);
              },
              Array.isArray(selectedKeys) && selectedKeys.length === rows * cols
                ? [...selectedKeys]
                : Array(rows * cols).fill(TestKeyState.Initial),
            ),
          );
          await api.timeout(20);
          if (shouldContinueRef.current) {
            startTicking(api, protocol, selectedDefinition, newFlat);
          }
        } catch (e) {
          shouldContinueRef.current = false;
          dispatch(setTestMatrixEnabled(false));
        }
      }
    };

    if (startTest && api && device && selectedDefinition) {
      shouldContinueRef.current = true;
      startTicking(api, device.protocol, selectedDefinition, flat);
    }

    return () => {
      stopTicking();
    };
  }, [startTest, selectedDefinition, api]);

  const downHandler = (evt: KeyboardEvent) => {
    evt.preventDefault();
  };
  const upHandler = (evt: KeyboardEvent) => {
    evt.preventDefault();
  };

  useEffect(() => {
    if (startTest) {
      window.addEventListener('keydown', downHandler);
      window.addEventListener('keyup', upHandler);
    }
    // Remove event listeners on cleanup
    return () => {
      window.removeEventListener('keydown', downHandler);
      window.removeEventListener('keyup', upHandler);
    };
  }, [startTest]);

  return selectedKeyArr;
};


// File: c:\Users\Potatox\Desktop\app\src\utils\use-size.ts
import * as React from 'react';
import useResizeObserver from '@react-hook/resize-observer';

export const useSize = (target: React.MutableRefObject<HTMLElement | null>) => {
  const [size, setSize] = React.useState<DOMRect>();

  React.useLayoutEffect(() => {
    if (target.current) {
      setSize(target.current.getBoundingClientRect());
    }
  }, [target]);

  // Where the magic happens
  useResizeObserver(target, (entry: any) => setSize(entry.contentRect));
  return size;
};


// File: c:\Users\Potatox\Desktop\app\src\utils\use-skip-font-check.ts
import {useCallback, useEffect, useState} from 'react';

export function useSkipFontCheck() {
  const [shouldSkipFontCheck, setShouldSkipFontCheck] = useState(false);
  const allowFontCheck = useCallback(() => {
    setShouldSkipFontCheck(false);
  }, []);
  const skipFontCheck = useCallback(() => {
    setShouldSkipFontCheck(true);
  }, []);
  useEffect(() => {
    document.fonts.load('Fira Sans').then(allowFontCheck, skipFontCheck);
  }, []);
  return shouldSkipFontCheck;
}

